<?php
namespace Nucarf\Merchant\Users\Entity;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;
use JsonSerializable;
use stdClass;


class UserPaginator extends TBase implements JsonSerializable {
  static $isValidate = false;

  static $_TSPEC = array(
    10 => array(
      'var' => 'total',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    20 => array(
      'var' => 'perPage',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    30 => array(
      'var' => 'currentPage',
      'isRequired' => false,
      'type' => TType::I64,
      ),
    40 => array(
      'var' => 'items',
      'isRequired' => false,
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => '\Nucarf\Merchant\Users\Entity\User',
        ),
      ),
    );

  /**
   * @var int
   */
  public $total = null;
  /**
   * @var int
   */
  public $perPage = null;
  /**
   * @var int
   */
  public $currentPage = null;
  /**
   * @var \Nucarf\Merchant\Users\Entity\User[]
   */
  public $items = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'UserPaginator';
  }

  public function read($input)
  {
    return $this->_read('UserPaginator', self::$_TSPEC, $input);
  }

  public function write($output) {
    return $this->_write('UserPaginator', self::$_TSPEC, $output);
  }

  public function jsonSerialize() {
    $json = new stdClass;
    if ($this->total !== null) {
      $json->total = (int)$this->total;
    }
    if ($this->perPage !== null) {
      $json->perPage = (int)$this->perPage;
    }
    if ($this->currentPage !== null) {
      $json->currentPage = (int)$this->currentPage;
    }
    if ($this->items !== null) {
      $json->items = $this->items;
    }
    return $json;
  }

}

